/* FactFilter */
output CFILT101
/* set(debit) */

  set([covered @instance = $INSTANCE1 @Assets]).concept.balance

output CFILT102
/* rule CFILT102: Rule: CFILT102 - Property 'balance' is not a property of a 'decimal'. */

  set([covered @instance = $INSTANCE1  @Assets]).balance

output CFILT103
/* set(us-gaap:Assets) */

  $a = [covered @instance = $INSTANCE1 @Assets];  set($a.concept.name)

output CFILT104
/* set(modelType[45864, qname: xbrli:monetaryItemType, derivedFrom: xbrli:monetary, xbrl-instance-2003-12-31.xsd, line 269] */

  $a = [covered @instance = $INSTANCE1 @Assets];  set($a.concept.data-type)

output CFILT105
/* set(modelType[45864, qname: xbrli:monetaryItemType, derivedFrom: xbrli:monetary, xbrl-instance-2003-12-31.xsd, line 269]) */

  $a = [covered @instance = $INSTANCE1 @Assets];  set($a.data-type)

output CFILT106
/* set(set(-6)) */

  $a = set([covered @instance = $INSTANCE1 @Assets]);  set($a.decimals)

output CFILT107
/* set(-6) */

  $a = set([covered @instance = $INSTANCE1 @Assets]); $a.decimals

output CFILT108
/* set(-6) */

  $a = list([covered @instance = $INSTANCE1 @Assets]);  set($a[1].decimals)

output CFILT109
/* -6 */

  $a = list([covered @instance = $INSTANCE1 @Assets]); $a[1].decimals

output CFILT110
/* Assets */

  $a = list([covered @instance = $INSTANCE1 @Assets]); $a[2].concept.name.local-name

output CFILT111
/* DepreciationAndAmortizationDiscontinuedOperations */

  $a = $US-GAAP-2020.concepts.to-list;  $a[2].name.local-name

output CFILT112
/* rule CFILT112: 'all' */

  $a = set([covered @instance = $INSTANCE1 @]);  $a[2].name

output CFILT113
/* rule CFILT113: Rule: CFILT113 - The 'index' property or index expression '[]' can only operate on a list or dictionary, found 'None' */

  $a = $INSTANCE1.taxonomy().concepts.to-set;  $a[2].name

output CFILT114
/* set(instant) */

  $a = set([covered @instance = $INSTANCE1 @Assets]); $a.concept.period-type

output CFILT115
/* rule CFILT115: Rule: CFILT115 - Property 'period-type' is not a property of a 'decimal'. */

  $a = set([covered @instance = $INSTANCE1 @Assets]); $a.period-type

output CFILT116
/* set(xbrli:item) */

  $a = set([covered @instance = $INSTANCE1 @Assets]); $a.concept.substitution

output CFILT117
/* set(xbrli:item) */

  $a = set([covered @instance = $INSTANCE1 @Assets]); $a.substitution

output CFILT118
/* set(5,198,000,000, 7,895,000,000, 8,515,000,000, 2,635,000,000, 10,146,000,000, 1,631,000,000, 16,848,000,000, 2,579,000,000, 40,230,000,000, 1,740,000,000, 271,000,000, 1,117,000,000, 45,436,000,000, 2,697,000,000, 5,288,000,000, 7,923,000,000, 180,000,000, 8,795,000,000, 1,795,000,000, 10,590,000,000, 259,000,000, 1,777,000,000, 18,461,000,000, 726,000,000, 5,334,000,000, 42,144,000,000) */

  set({covered @instance = $INSTANCE1 @concept = Assets})

output CFILT119
/* set(45,436,000,000, 42,144,000,000, 40,230,000,000) */

  set([covered @instance = $INSTANCE1 @Assets])

output CFILT120
/* 637 */

  set({covered @instance = $INSTANCE1 @concept}).count

output CFILT121
/* 320 */

  set([covered @instance = $INSTANCE1 @concept]).count

output CFILT122
/* 320 */

  set([covered @instance = $INSTANCE1 @concept = *]).count

output CFILT123
/* 3 */

  list([covered @instance = $INSTANCE1 @concept.local-name = 'Assets']).count

output CFILT124
/* 112 */

  list([covered @instance = $INSTANCE1 @concept.period-type = instant]).count

output CFILT125
/* 112 */

  list([covered @instance = $INSTANCE1 @concept.period-type = INSTANT]).count

output CFILT126
/* 112 */

  list([covered @instance = $INSTANCE1 @concept.period-type = 'instant']).count

output CFILT127
/* 314 */

  list([covered @instance = $INSTANCE1 @concept.period-type = duration]).count

output CFILT128
/* 314 */

  list([covered @instance = $INSTANCE1 @concept.period-type = Duration]).count

output CFILT129
/* 314 */

  list([covered @instance = $INSTANCE1 @concept.period-type = 'duration']).count

output CFILT130
/* 166 */

  list([covered @instance = $INSTANCE1 @concept.balance = credit]).count

output CFILT131
/* 166 */

  list([covered @instance = $INSTANCE1 @concept.balance = 'credit']).count

output CFILT132
/* 167 */

  list([covered @instance = $INSTANCE1 @concept.balance = debit]).count

output CFILT133
/* 167 */

  list([covered @instance = $INSTANCE1 @concept.balance = 'debit']).count

output CFILT134
/* 93 */

  list([covered @instance = $INSTANCE1 @concept.balance = none]).count

output CFILT135
/* 0 */

  list([covered @instance = $INSTANCE1 @concept.balance = 'none']).count

output CFILT136
/* 333 */

  list([covered @instance = $INSTANCE1 @concept.balance = *]).count

output CFILT137
/* list() */

  list({covered @instance = $INSTANCE1 @concept.attribute(someattr) = *})

output CFILT138
/* 1450 */

  list({covered @instance = $INSTANCE1 @concept.data-type = xbrli:monetaryItemType}).count

output CFILT139
/* 1450 */

  list({covered @instance = $INSTANCE1 @concept.is-monetary = true}).count

output CFILT140
/* 1537 */

  list({covered @instance = $INSTANCE1 @concept.is-numeric = true}).count

output CFILT141
/* 1589 */

  list({covered @instance = $INSTANCE1 @concept.substitution = xbrli:item}).count

output CFILT142
/* 29 */

  list({covered @instance = $INSTANCE1 @concept.namespace-uri = 'http://xbrl.sec.gov/dei/2020-01-31'}).count

output CFILT143
/* 318 */

  list({covered @instance = $INSTANCE1 @concept.period-type = instant @concept.balance = debit}).count

output CFILT144
/* 29 */

  list({covered @instance = $INSTANCE1 @concept.base-type = xbrli:stringItemType @concept.data-type != us-types:zoneStatusItemType}).count

output CFILT145
/* 29 */

  list({covered @instance = $INSTANCE1 @concept in list(Assets, Land, Cash, Liabilities)}).count

output CFILT146
/* 1560 */

  list({covered @instance = $INSTANCE1 @concept not in list(Assets, Land, Cash, Liabilities)}).count

output CFILT147
/* 93 */

  list([covered @instance = $INSTANCE1 @concept.balance != *]).count

output PFILT101
/* 205 */

  list({covered @instance = $INSTANCE1 @period = date('2020-12-31')}).count

output PFILT102
/* 0 */

  list({covered @instance = $INSTANCE1 @period = duration('2020-01-01', '2021-01-01')}).count

output PFILT103
/* 50 */

  list([covered @instance = $INSTANCE1 @period = date('2020-12-31')]).count

output PFILT104
/* rule PFILT104: Rule: PFILT104 - Function 'cats' not found */

  [@period = cats('2020-12-31')]

output PFILT105
/* 1 */

  list({covered @instance = $FOREVER_INSTANCE @period = forever}).count

output PFILT106
/* 1 */

  list({covered @instance = $FOREVER_INSTANCE @period = none}).count

output PFILT107
/* 1 */

  list({covered @instance = $FOREVER_INSTANCE @period != *}).count

output PFILT108
/* 2254 */

  list({covered @instance = $FOREVER_INSTANCE @period = *}).count

output PFILT109
/* 2254 */

  list({covered @instance = $FOREVER_INSTANCE @period}).count

output PFILT110
/* list(124,800,000) */

  list({covered @instance = $FOREVER_INSTANCE @period = forever})

output PFILT111
/* rule PFILT111: Rule: PFILT111 - Factset aspect property 'year' is not a valid property of aspect 'period'. */

  list([covered @instance = $INSTANCE1 @period.year = '2020']).count

output PFILT112
/* rule PFILT112: Rule: PFILT112 - Factset aspect property 'end.year' is not a valid property of aspect 'period'. */

  list([covered @instance = $INSTANCE1 @period.end.year = '2020']).count

output PFILT113
/* 50 */

  list([covered @instance = $INSTANCE1 @period.end = date('2020-12-31')]).count

output PFILT114
/* rule PFILT114: Rule: PFILT114 - Property 'end' is not a property of a 'decimal'. */

  list([covered @instance = $INSTANCE1 where $fact.end.year == '2020']).count

output PFILT115
/* 133 */

  list([covered @instance = $INSTANCE1 where $fact.period.end.year == '2020']).count

output PFILT116
/* 432 */

  list({covered @instance = $INSTANCE1 @period.days = 91}).count

output PFILT117
/* [PFILT117.2021] 219
[PFILT117.2020] 213 */

  list({covered @instance = $INSTANCE1 @@period.days = 91}).count
rule-suffix if $alignment == none 'FIX' else $alignment['period'].end.year

output PFILT118
/* 607 */

  list({covered @instance = $INSTANCE1 where $fact.period.days > 91 }).count

output PFILT119
/* [PFILT119] period = dictionary(period=2021-04-01 to 2021-07-01) value = 50
[PFILT119] period = dictionary(period=2020-04-01 to 2020-07-01) value = 47 */

  list([covered @instance = $INSTANCE1 @@period.days = 91]).count
message
'period = {$alignment} value = {$rule-value}'

output PFILT120
/* 97 */

  list([covered @instance = $INSTANCE1 @period.days = 91]).count

output PFILT121
/* [PFILT121] 50
[PFILT121] 47 */

  list([covered @instance = $INSTANCE1 @@period.days = 91]).count

output PFILT122
/* [PFILT122] 50
[PFILT122] 47 */

  list([@instance = $INSTANCE1 @@period.days = 91 @entity @unit @concept]).count

output PFILT123
/* [xule:error] rule PFILT123: 'aspectExpr' */

  list({@instance = $INSTANCE1 @@period.days = 91 @entity @unit @concept @dimensions}).count

output PFILT124
/* [PFILT124] 213
[PFILT124] 219 */

  list({covered-dims @instance = $INSTANCE1 @@period.days = 91 @entity @unit @concept}).count

output NOFILT001
/* 1589 */

  list(covered @instance = $INSTANCE1).count

output NOFILT002
/* 1589 */

  list({covered @instance = $INSTANCE1 @}).count

output NOFILT003
/* 637 */

  set({covered @instance = $INSTANCE1}).count

output NOFILT004
/* 320 */

  set([covered @instance = $INSTANCE1]).count

output NOFILT005
/* 1589 */

  list({covered @ @instance = $INSTANCE1}).count

output INSFILT001
/* 1739 */

  $INSTANCE1.facts.count

output INSFILT002
/* -602 */

  first(($INSTANCE1.facts).to-list.sort)

output INSFILT003
/* 1577 */

  (filter ($INSTANCE1.facts.sort) where $item.concept.is-monetary == true).count

output INSFILT004
/* 110 */

  (filter ($INSTANCE1.facts.sort) where $item.concept.is-numeric == true and $item.concept.is-monetary != true).count

output INSFILT005
/* 87 */

  list({covered @instance = $INSTANCE1 @concept.is-numeric = true @concept.is-monetary = false}).count

output INSFILT006
/* 1577 */

  (filter ($INSTANCE1.facts.sort) where $item.is-monetary == true).count

output UNITFILT001
/* {{False with alignment dictionary(entity=http://www.sec.gov/CIK=0000831259,period=2021-01-01 to 2021-07-01)},
{False with alignment dictionary(entity=http://www.sec.gov/CIK=0000831259)}} */

  any(list([@instance = $INSTANCE1 @concept=Assets @unit=* @period=*] > 0 and exists([@instance = $INSTANCE1 @concept=dei-2020:EntityRegistrantName])))

  message
  '{$rule-value} with alignment {$alignment}'

output UNITFILT002
/* True with alignment dictionary(entity=http://www.sec.gov/CIK=0000831259) */

  any(list([@instance = $INSTANCE1 @concept=Assets @unit = * @period=*] > 0 and exists([@instance = $INSTANCE1 @concept=dei-2020:EntityRegistrantName @period])))

  message
  '{$rule-value} with alignment {$alignment}'

output UNITFILT003
/* True with alignment dictionary(entity=http://www.sec.gov/CIK=0000831259) */

  any(list([@instance = $INSTANCE1 @concept=Assets @unit = * @period=*] > 0 and exists([@instance = $INSTANCE1 @concept=dei-2020:EntityRegistrantName @period=*])))

  message
  '{$rule-value} with alignment {$alignment}'

output UNITFILT004
/* False with alignment dictionary(entity=http://www.sec.gov/CIK=0000831259) */

  any(list([@instance = $INSTANCE1 @concept=Assets @unit = * @period=*] > 0 and exists([@instance = $INSTANCE1 @concept=dei-2020:EntityRegistrantName @unit=* @period=*])))
  
  message
  '{$rule-value} with alignment {$alignment}'

output UNITFILT005
/* {{False with alignment dictionary(entity=http://www.sec.gov/CIK=0000831259,period=2021-01-01 to 2021-07-01)},
{False with alignment dictionary(entity=http://www.sec.gov/CIK=0000831259)}} */

  any(list([@instance = $INSTANCE1 @concept=Assets @unit @period] > 0 and exists([@instance = $INSTANCE1 @concept=dei-2020:EntityRegistrantName])))

  message
  '{$rule-value} with alignment {$alignment}'

output UNITFILT006
/* False with alignment dictionary(entity=http://www.sec.gov/CIK=0000831259,unit=USD)
False with alignment dictionary(entity=http://www.sec.gov/CIK=0000831259,period=2021-01-01 to 2021-07-01) */

  any(list([@instance = $INSTANCE1 @concept=Assets  @period] > 0 and exists([@instance = $INSTANCE1 @concept=dei-2020:EntityRegistrantName @unit])))

  message
  '{$rule-value} with alignment {$alignment}'

output UNITFILT007
/* True with alignment dictionary(entity=http://www.sec.gov/CIK=0000831259) */

  any(list([@instance = $INSTANCE1 @concept=Assets @unit @period] > 0 and exists([@instance = $INSTANCE1 @concept=dei-2020:EntityRegistrantName @period])))

  message
  '{$rule-value} with alignment {$alignment}'

output UNITFILT008
/* True with alignment dictionary(entity=http://www.sec.gov/CIK=0000831259) */

  any(list([@instance = $INSTANCE1 @concept=Assets @unit = * @period] > 0 and exists([@instance = $INSTANCE1 @concept=dei-2020:EntityRegistrantName @period])))

  message
  '{$rule-value} with alignment {$alignment}'

output UNITFILT009
/* {{False with alignment dictionary(entity=http://www.sec.gov/CIK=0000831259,unit=USD)},
{False with alignment dictionary(entity=http://www.sec.gov/CIK=0000831259)}} */

  any(list([@instance = $INSTANCE1 @concept=Assets  @period] > 0 and exists([@instance = $INSTANCE1 @concept=dei-2020:EntityRegistrantName @unit @period])))

  message
  '{$rule-value} with alignment {$alignment}'

output UNITFILT010
/* True with alignment dictionary(entity=http://www.sec.gov/CIK=0000831259,unit=USD) */

  any(list([@instance = $INSTANCE1 @concept=Assets  @period] > 0 and exists([covered @instance = $INSTANCE1 @concept=dei-2020:EntityRegistrantName])))

  message
  '{$rule-value} with alignment {$alignment}'

output UNITFILT011
/* {{True with alignment dictionary(entity=http://www.sec.gov/CIK=0000831259,unit=USD,period=2021-01-01)},
{True with alignment dictionary(period=2020-07-01,unit=USD,entity=http://www.sec.gov/CIK=0000831259)},
{True with alignment dictionary(entity=http://www.sec.gov/CIK=0000831259,unit=USD,period=2021-07-01)}} */

  any(list([@instance = $INSTANCE1 @concept=Assets] > 0 and exists([covered @instance = $INSTANCE1 @concept=dei-2020:EntityRegistrantName @unit @period])))

  message
  '{$rule-value} with alignment {$alignment}'

output UNITFILT012
/* 52 */

  list({covered @instance = $INSTANCE1  @unit = none}).count

output UNITFILT013
/* 1537 */

  list({covered @instance = $INSTANCE1  @unit != none}).count

output UNITFILT014
/* 1589 */

  list({covered @instance = $INSTANCE1  @unit}).count

output UNITFILT015
/* 1537 */

  list({covered @instance = $INSTANCE1  @unit = *}).count

output UNITFILT016
/* 1450 */

  list({covered @instance = $INSTANCE1  @unit = unit(iso4217:USD)}).count

output UNITFILT017
/* 1472 */

  list({covered @instance = $INSTANCE1  where $fact.unit.numerator == unit(iso4217:USD)}).count

output UNITFILT018
/* 52 */

  list({covered @instance = $INSTANCE1  where $fact.unit.denominator == none}).count

output UNITFILT019
/* 0 */

  list({covered @instance = $INSTANCE1  where ($fact.unit.denominator == none and $fact.unit.numerator == unit(iso4217:USD))}).count

output MULTIIN001
/* 3234 */

  list(covered @instance in list($INSTANCE1, $INSTANCE2)).count

output MULTIIN002
/* list(40,230,000,000, 41,099,000,000, 42,144,000,000, 42,144,000,000, 45,436,000,000, 46,917,000,000) */

  list([covered @instance in list($INSTANCE1, $INSTANCE2) @concept=Assets]).sort

output CUBEFILT001
/* 243 */

  list({covered @instance = $INSTANCE1 @cube in $STATEMENT_CUBES}).count

output CUBEFILT002
/* 28 */

  list({covered @instance = $INSTANCE1 @cube in $STATEMENT_CUBES @cube not in $STATEMENT_CUBES}).count

output CUBEFILT003
/* 1187 */

  list({covered @instance = $INSTANCE1 @cube not in $STATEMENT_CUBES}).count

output CUBEFILT004
/* 1187 */

  list({covered @instance = $INSTANCE1 @cube in $STATEMENT_CUBES @cube in $NOTES_CUBES}).count

output CUBEFILT005
/* 1187 */

  list({covered @instance = $INSTANCE1 @cube in $NOTES_CUBES}).count

output CUBEFILT006
/* 14 */

  list({covered @instance = $INSTANCE1 @concept=PaymentsToAcquireProductiveAssets @cube.name = StatementTable @cube.drs-role = 'http://www.fcx.com/role/ConsolidatedStatementsofCashFlowsUnaudited'}).count

output CUBEFILT007
/* 58 */

  list({covered @instance = $INSTANCE1 @concept=PaymentsToAcquireProductiveAssets @cube != none}).count

output CUBEFILT008
/* 58 */

  list({covered @instance = $INSTANCE1 @concept=PaymentsToAcquireProductiveAssets @cube = *}).count

output CUBEFILT009
/* 187 */

  list({covered @instance = $INSTANCE1 @cube = none}).count

output CUBEFILT010
/* 96 */

  list({covered @instance = $INSTANCE1 @cube.name = StatementTable @cube.drs-role = 'http://www.fcx.com/role/ConsolidatedStatementsofCashFlowsUnaudited'}).count

output CUBEFILT011
/* 96 */

  list({covered @instance = $INSTANCE1 @cube=$INSTANCE1.taxonomy.cube(StatementTable, 'http://www.fcx.com/role/ConsolidatedStatementsofCashFlowsUnaudited')}).count

output CUBEFILT012
/* 187 */

  list({covered @instance = $INSTANCE1 @cube=taxonomy().cube(StatementTable, 'http://www.fcx.com/role/ConsolidatedStatementsofCashFlowsUnaudited')}).count

output CUBEFILT013
/* us-gaap:StatementTable - http://www.fcx.com/role/ConsolidatedStatementsofCashFlowsUnaudited - 1004005 - Statement - Consolidated Statements of Cash Flows (Unaudited) */

  $INSTANCE1.taxonomy().cube(StatementTable, 'http://www.fcx.com/role/ConsolidatedStatementsofCashFlowsUnaudited')

output CUBEFILT014
/* 96 */

  list({covered @instance = $INSTANCE1 @cube=$INSTANCE1.taxonomy().cube(StatementTable, 'http://www.fcx.com/role/ConsolidatedStatementsofCashFlowsUnaudited')}).count

output CUBEFILT015
/* 243 */

  list({covered @instance = $INSTANCE1 @cube in $STATEMENT_CUBES}.cubes.cube-concept).length

output CUBEFILT016
/* 28 */

  list({covered @instance = $INSTANCE1 @cube in $STATEMENT_CUBES @cube not in $STATEMENT_CUBES}.cubes.cube-concept).length

output CUBEFILT017
/* 1187 */

  list({covered @instance = $INSTANCE1 @cube in $STATEMENT_CUBES @cube in $NOTES_CUBES}.cubes.cube-concept).length

output CUBEFILT018
/* 28 */

  list({covered @instance = $INSTANCE1 @cube.name = StatementTable  @cube in $NOTES_CUBES}.cubes.cube-concept).count

output CUBEFILT019
/* 243 */

  list({covered @instance = $INSTANCE1 @cube in $NOTES_CUBES @cube in $STATEMENT_CUBES}).count

output CUBEFILT020
/* 96 */

  list({covered @instance = $INSTANCE1 @cube.name = StatementTable @cube.drs-role = 'http://www.fcx.com/role/ConsolidatedStatementsofCashFlowsUnaudited'}.cubes.cube-concept).length

output CUBEFILT021
/* 96 */

  list({covered @instance = $INSTANCE1 @cube.name = StatementTable @cube.drs-role = 'http://www.fcx.com/role/ConsolidatedStatementsofCashFlowsUnaudited'}.cubes.drs-role().uri).length

output CUBEFILT022
/* 14 */

  list({covered @instance = $INSTANCE1 @concept=PaymentsToAcquireProductiveAssets @cube.name = StatementTable @cube.drs-role = 'http://www.fcx.com/role/ConsolidatedStatementsofCashFlowsUnaudited'}).sid

output CUBEFILT023
/* 243 */

  list({covered @instance = $INSTANCE1 @cube.name = StatementTable}).count

output CUBEFILT024
/* set(us-gaap:StatementTable) */

  $STATEMENT_CUBES.cube-concept

output CUBEFILT025
/* 0 */

  list({covered @instance = $INSTANCE1 @concept=PaymentsToAcquireProductiveAssets @cube = none}).count

output DIMFILT001
/* 3785000000 */

  max(list({covered @instance = $INSTANCE1 @RevenueFromContractWithCustomerIncludingAssessedTax @srt:ProductOrServiceAxis}))

output DIMFILT002
/* None */

  max(list({covered @instance = $INSTANCE1 @RevenueFromContractWithCustomerIncludingAssessedTax @srt:ProductOrServiceAxis !=*}))

output DIMFILT003
/* None */

  max(list({covered @instance = $INSTANCE1 @RevenueFromContractWithCustomerIncludingAssessedTax @srt:ProductOrServiceAxis = none}))

output DIMFILT004
/* 3785000000 */

  max(list([covered @instance = $INSTANCE1 @RevenueFromContractWithCustomerIncludingAssessedTax @srt:ProductOrServiceAxis ]))

output DIMFILT005
/* 3785000000 */

  max(list([covered @instance = $INSTANCE1 @RevenueFromContractWithCustomerIncludingAssessedTax @srt:ProductOrServiceAxis = *]))

output NOTINFILT001
/* 1139 */

  list({covered @instance = $INSTANCE1 @concept not in list(Assets,Liabilities) where $fact.dimensions.length > 0 }).length

output NILSFILT001
/* 1589 */

  list({covered nonils @instance = $INSTANCE1 @concept.substitution = xbrli:item}).count

output NILSFILT002
/* 1589 */

  list({covered nonils @instance = $INSTANCE1}).count

output UNITFILT020
/* rule UNITFILT020: Rule: UNITFILT020 - Factset aspect property 'numerator' is not a valid property of aspect 'unit'. */

  list({covered @instance = $INSTANCE1  @unit.numerator = unit(iso4217:USD)}).count

output UNITFILT021
/* 1450 */

  list({covered @instance = $INSTANCE1  @unit in list(unit(iso4217:USD))}).count

output DIMFILT006
/* rule DIMFILT006: 'dict' object has no attribute 'type' */

  $Rev = list({covered @instance = $INSTANCE1 @RevenueFromContractWithCustomerIncludingAssessedTax}.dimensions)
list({covered @instance = $INSTANCE1 @dimensions in $Rev}).count

output DIMFILT007
/* 28 */

  $Rev = {covered @instance = $INSTANCE1 @RevenueFromContractWithCustomerIncludingAssessedTax}.dimensions
list({covered @instance = $INSTANCE1 @RevenueFromContractWithCustomerIncludingAssessedTax @dimensions = *}).count

output DIMFILT008
/* 0 */

  $Rev = {covered @instance = $INSTANCE1 @RevenueFromContractWithCustomerIncludingAssessedTax}.dimensions
list({covered @instance = $INSTANCE1 @RevenueFromContractWithCustomerIncludingAssessedTax @dimensions = none}).count

output DIMFILT009
/* 0 */

  list({covered @instance = $INSTANCE_TYPED_DIM  @RevenueRemainingPerformanceObligationExpectedTimingOfSatisfactionStartDateAxis = '2023-01-01'}).count

output DIMFILT010
/* 2 */

  list({covered @instance = $INSTANCE_TYPED_DIM  @RevenueRemainingPerformanceObligationExpectedTimingOfSatisfactionStartDateAxis = date('2023-01-01')}).count

output DIMFILT011
/* 0 */

  list({covered @instance = $INSTANCE_TYPED_DIM  @concept=RevenueRemainingPerformanceObligationExpectedTimingOfSatisfactionPeriod1 @RevenueRemainingPerformanceObligationExpectedTimingOfSatisfactionStartDateAxis = none}).count

output DIMFILT012
/* list(143,500,000, 17,500,000, 18,000,000, 19,000,000, 19,900,000, 20,900,000, 22,100,000, None, P1Y, P1Y, P1Y, P1Y, P1Y, P9M) */

  list({covered @instance = $INSTANCE_TYPED_DIM  @RevenueRemainingPerformanceObligationExpectedTimingOfSatisfactionStartDateAxis = *}).sort('asc')

output DIMFILT013
/* list(None, P1Y, P1Y, P1Y, P1Y, P1Y, P9M) */

  list({covered @instance = $INSTANCE_TYPED_DIM  @concept=RevenueRemainingPerformanceObligationExpectedTimingOfSatisfactionPeriod1 @RevenueRemainingPerformanceObligationExpectedTimingOfSatisfactionStartDateAxis}).sort('asc')

output DIMFILT014
/* list(17,500,000, 18,000,000, 19,000,000, 19,900,000, 20,900,000, 22,100,000, 143,500,000) */

  list({covered @instance = $INSTANCE_TYPED_DIM  @concept=RevenueRemainingPerformanceObligation @RevenueRemainingPerformanceObligationExpectedTimingOfSatisfactionStartDateAxis}).sort('asc')

output DIMFILT015
/* list(None, P1Y, P1Y, P1Y, P1Y, P1Y, P9M) */

  list({covered @instance = $INSTANCE_TYPED_DIM  @concept=RevenueRemainingPerformanceObligationExpectedTimingOfSatisfactionPeriod1}).sort('asc')

output DIMFILT016
/* list(None, P1Y, P1Y, P1Y, P1Y, P1Y, P9M) */

  list({covered @instance = $INSTANCE_TYPED_DIM  @concept=RevenueRemainingPerformanceObligationExpectedTimingOfSatisfactionPeriod1 @RevenueRemainingPerformanceObligationExpectedTimingOfSatisfactionStartDateAxis=*}).sort('asc')

output DIMFILT017
/* list(P5Y, P9Y, P9Y) */

  list({covered @instance = $INSTANCE_TYPED_DIM  @concept=AcquiredFiniteLivedIntangibleAssetsWeightedAverageUsefulLife @RevenueRemainingPerformanceObligationExpectedTimingOfSatisfactionStartDateAxis}).sort('asc')

output DIMFILT018
/* 112 */

  $Rev = list({covered @instance = $INSTANCE1 @RevenueFromContractWithCustomerIncludingAssessedTax}.dimensions)
list(for $dim in $Rev {covered @instance = $INSTANCE1 @dimensions = $dim}).count

output DIMFILT019
/* [DIMFILT019] 456,000,000
[DIMFILT019] 528,000,000
[DIMFILT019] 3,785,000,000
[DIMFILT019] 2,769,000,000
[DIMFILT019] 532,000,000
[DIMFILT019] 1,517,000,000
[DIMFILT019] 1,115,000,000 */

  max(list({covered @instance = $INSTANCE1 @RevenueFromContractWithCustomerIncludingAssessedTax @@srt:ProductOrServiceAxis = *}))
