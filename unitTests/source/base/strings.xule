/* Strings */
output DCO101
/* True */

  'http://some/role/for/cashflow/'.contains('cashflow')

output DCO102
/* False */

  'http://some/role/for/cashflow/'.contains('cashflows')

output CON101
/* True */

  contains('a frog and a house', 'hou')

output CON102
/* False */

  contains('a frog and a house', 'hout')

output DIO101
/* 3 */

  'Hello Mr. Stains'.index-of('llo')

output DIO102
/* 5 */

  'Hello Mr Stains-o-there'.index-of('o')

output DIO191
/* rule DIO191: Rule: DIO191 - Property 'index-of' must have 1 arguments. Found 0. */

  'Hello Mr Stains-o-there'.index-of

output DIO192
/* rule DIO192: Rule: DIO192 - Property 'index-of' must have 1 arguments. Found 0. */

  'Hello Mr Stains-o-there'.index-of()

output IXO101
/* 14 */

  index-of('a frog and a house', 'hou')

output IXO102
/* 0 */

  index-of('a frog and a house', 'hout')

output DLI101
/* 17 */

  'Hello Mr Stains-o-there'.last-index-of('o')

output LIO101
/* 12 */

  last-index-of('a frog and a house', 'a')

output LIO102
/* 3 */

  last-index-of('a frog and a house', 'f')

output LIO103
/* 0 */

  last-index-of('Hello Mr Stains', 'z')

output LIO104
/* rule LIO104: Rule: LIO104 - The 'last-index-of' function must have at least one argument, found none. */

  last-index-of()

output LIO105
/* rule LIO105: Rule: LIO105 - Property 'last-index-of' must have 1 arguments. Found 0. */

  last-index-of('Hello Mr Stains')

output LIO106
/* rule LIO106: Rule: LIO106 - Property 'last-index-of' must have 1 arguments. Found 2. */

  last-index-of('Hello Mr Stains', 'o', 'o')

output LIO107
/* rule LIO107: Rule: LIO107 - The first argument of function 'last-index-of' must be string, uri, found 'list'. */

  last-index-of(list('Hello Mr Stains'), 'o')

output LEN101
/* 0 */

  ''.length

output LEN102
/* 1 */

  'a'.length

output LEN103
/* 3 */

  'aaa'.length

output LEN104
/* 18 */

  length('a frog and a house')

output LEN105
/* 1 */

  length('z')

output LEN106
/* 0 */

  length('')

output DLO101
/* abcdef */

  'ABCdef'.lower-case

output DLO102
/* abcdef */

  'abcdef'.lower-case

output DLO111
/* set(cat, dog, hello kitty) */

  set('HELLO KITTY','DOG', 'cAT').lower-case

output LOW101
/* xule is my favorite language. yeah! */

  lower-case('XULE is my favorite language. Yeah!')

output LOW102
/*  */

  lower-case('')

output LOW103
/* 123000 */

  lower-case('123,000')

output DNU101
/* 67 */

  '67'.number

output DNU102
/* 12345 */

  '12345'.number

output DNU103
/* 12.345 */

  '12.345'.number

output DNU104
/* 12345 */

  12345.number

output DNU105
/* inf */

  inf.number

output DNU111
/* list(3.14, 22, -3) */

  list('3.14', '22', '-3').number

output DNU112
/* list() */

  list().number

output DNU114
/* set(-3, 3.14, 22) */

  set('3.14', '22', '-3', '22').number

output DNU116
/* set() */

  set().number

output DNU191
/* rule DNU191: Rule: DNU191 - Cannot convert 'z67' to a number */

  'z67'.number

output DNU192
/* rule DNU192: Rule: DNU192 - Cannot convert '' to a number */

  ''.number

output NUM101
/* 15.0111 (rounded 4d) */

  number('15.01111')

output NUM102
/* inf */

  number('inf')

output NUM103
/* -22 */

  number('-22')

output NUM104
/* rule NUM104: Rule: NUM104 - Cannot convert '' to a number */

  number('')

output NUM105
/* rule NUM105: Rule: NUM105 - The first argument of function 'number' must be int, float, decimal, fact, found 'None'. */

  number(none)

output NUM106
/* inf */

  inf / 7

output NUM107
/* inf */

  inf + inf

output NUM108
/* inf */

  inf * 7

output NUM109
/* nan */

  inf - inf

output NUM110
/* nan */

  inf / inf

output REGEX001
/* dictionary(groups=list(),end=5,match-count=1,match=de,start=4) */

  'abcdefg'.regex-match('de+')

output REGEX002
/* list(dictionary(groups=list(),start=4,match=de,end=5,match-count=1)) */

  'abcdefg'.regex-match-all('de+')

output REGEX003
/* de */

  'abcdefg'.regex-match-string('de+')

output REGEX004
/* d */

  'abcdefgabcdefg'.regex-match-string('(c)(d)', 2) 

output REGEX005
/* list(cd, fg, cd, fg) */

  'abcdefggabcdefg'.regex-match-string-all('[cf]([dg])') 

output REGEX006
/* list(d, g, d, g) */

  'abcdefggabcdefg'.regex-match-string-all('[cf]([dg])', 1) 

output REGEX007
/* dictionary(groups=list(),end=5,match-count=1,match=de,start=4) */

  regex-match('abcdefg','de+')

output REGEX008
/* list(dictionary(groups=list(),start=4,match=de,end=5,match-count=1)) */

  regex-match-all('abcdefg','de+')

output REGEX009
/* de */

  regex-match-string('abcdefg','de+')

output DSP101
/* list(The, quick, fox, jumped, over, the, lazy, dogs, back) */

  'The quick fox jumped over the lazy dogs back'.split(' ')

output DSP102
/* list(The quick fox jumped over the lazy dogs back) */

  'The quick fox jumped over the lazy dogs back'.split('')

output DSP103
/* set(list(dog), list(b, t), list(c, t), list(mouse))  */

  set('cat','dog','mouse','bat').split('a')

output DSP104
/* list(list(c, t), list(dog), list(mouse), list(b, t)) */

  list('cat','dog','mouse','bat').split('a')

output DSP191
/* rule DSP191: Rule: DSP191 - The separator argument for property 'string' must be a 'string', found 'int' */

  'The quick fox jumped over the lazy dogs back'.split(3)

output DSP192
/* rule DSP192: 'int' object has no attribute 'split' */

  2.split('.')

output DSP193
/* rule DSP193: Rule: DSP193 - Property 'split' is not a property of a 'qname'. */

  katteringram.split('r')

output DST101
/* 27 */

  27.string

output DST102
/* 2,734.5679 (rounded 4d) */

  2734.56789.string

output DST103
/* 273489 */

  273489.plain-string

output DST104
/* 2734.56789 */

  2734.56789.plain-string

output STR101
/* 5 */

  string(5)

output STR102
/* cat */

  string('cat')

output STR103
/* cat */

  plain-string('cat')

output STR104
/* 2734.56789 */

  plain-string(2734.56789)

output DSS101
/* Hello */

  'Hello Mr. Stains'.substring(1,5)

output DSS102
/* Mr. */

  'Hello Mr. Stains'.substring(7,9)

output SUBS101
/* Hello */

  substring('Hello Mr. Stains', 1, 5)

output SUBS102
/* Mr. Stains  */

  substring('Hello Mr. Stains', 7)

output INTRSF001
/* 44075 */

  inline-transform('01-septembre-2020',ixt:date-day-monthname-year-fr, 'date')

output INTRSF002
/* 44075 */

  '01-septembre-2020'.inline-transform(ixt:date-day-monthname-year-fr, 'date')

output TOQ101
/* Assets1 */

  'Assets1'.to-qname

output TOQ102
/* Assets1 */

  to-qname('Assets1')

output DTR101
/* (item) */

  '(' + ' item '.trim() + ')'

output DTR102
/* (item ) */

  '(' + ' item '.trim('left') + ')'

output DTR103
/* ( item) */

  '(' + ' item '.trim('right') + ')'

output DTR104
/* (item) */

  '(' + ' item '.trim('both') + ')'

output DTR105
/* (item) */

  '(' +  trim(' item ') + ')'

output DTR106
/* rule DTR106: Rule: DTR106 - The argument for property 'trim' must be a string with the value of 'left', 'right' or 'both', found a value of type 'qname' */

  '(' + ' item '.trim(both) + ')'

output TRIM100
/* (item) */

  '(' +  trim(' item ') + ')'

output TRIM101
/* (item ) */

  '(' +  trim(' item ', 'left') + ')'

output TRIM102
/* ( item) */

  '(' +  trim(' item ', 'right') + ')'

output TRIM103
/* (item) */

  '(' +  trim(' item ', 'both') + ')'

output TRIM104
/* rule TRIM104: Rule: TRIM104 - The argument for property 'trim' must be one of 'left', 'right' or 'both', found 'None' */

  '(' +  trim(' item ', 'none') + ')'

output SUMSTRING101
/* rule SUMSTRING101: Rule: SUMSTRING101 - The first argument of function 'sum' must be set, list, found 'string'. */

  sum('hello')

output COUNTSTRING101
/* rule COUNTSTRING101: Rule: COUNTSTRING101 - The first argument of function 'count' must be set, list, found 'string'. */

  count('hello')

output DUC101
/* ABC1 */

  'ABC1'.upper-case

output DUC102
/* ABCDEF */

  'ABCdef'.upper-case

output DUC103
/* ABCDEF */

  'abcdef'.upper-case

output STRIN001
/* rule STRIN001: Rule: STRIN001 - Property 'last' is not a property of a 'string'. */

  'abcdef'.last

output STRIN002
/* rule STRIN002: Rule: STRIN002 - The 'index' property or index expression '[ */

  'abcdef'[3]

output STRIN003
/* rule STRIN003: Rule: STRIN003 - Property 'first' is not a property of a 'string'. */

  'abcdef'.first
