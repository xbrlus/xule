constant $TAXONOMY_DATE = '20231231'
constant $PUBLISH_TAXONOMY = 'MyTaxonomy1'
constant $TICKER = 'hbb'
constant $INSTANCE_NAME = 'hbb-20221231_htm'
constant $NEW_CO_NAMESPACE = 'http://www.hamiltonbeachbrands.com/20231231'
constant $OLD_CO_NAMESPACE = 'http://www.hamiltonbeachbrands.com/20221231'
constant $NAMSPACE_DICT = dict(list('http://fasb.org/us-gaap/2021-01-31','http://fasb.org/us-gaap/2023'),
                                list('http://fasb.org/srt/2021-01-31', 'http://fasb.org/srt/2023'),
                                list($OLD_CO_NAMESPACE, $NEW_CO_NAMESPACE),
                                list('http://xbrl.sec.gov/dei/2021','http://xbrl.sec.gov/dei/2023'),
                                list('http://xbrl.sec.gov/dei/2021q4','http://xbrl.sec.gov/dei/2023'),
                                list('http://xbrl.sec.gov/country/2021','http://xbrl.sec.gov/country/2023'),
                                list('http://xbrl.sec.gov/currency/2021', 'http://xbrl.sec.gov/currency/2023'),
                                list('http://xbrl.sec.gov/stpr/2021', 'http://xbrl.sec.gov/stpr/2023')
                                )
                                
output create_package
true
package-name $PUBLISH_TAXONOMY
package-url $NEW_CO_NAMESPACE
document-uri $TICKER + '-' + $TAXONOMY_DATE + '.xsd'
document-namespace $NEW_CO_NAMESPACE
document-package-entry-point true
document-package-entry-point-description 'Official Statement  Taxonomy '
document-package-entry-point-language 'en-US'
document-package-entry-point-name $TICKER + ' ' + $TAXONOMY_DATE + ''
document-import list('https://xbrl.sec.gov/dei/2023/dei-2023.xsd','https://xbrl.fasb.org/us-gaap/2023/elts/us-gaap-all-2023.xsd').to-xodel 
import2-url 'https://xbrl.fasb.org/us-gaap/2023/elts/us-gaap-all-2023.xsd'


output create_roles
for $role in filter taxonomy().roles where not $item.uri.contains('fasb.org') and not $item.uri.contains('xbrl.sec.gov')
    $role

package-name $PUBLISH_TAXONOMY
document-uri $TICKER + '-' + $TAXONOMY_DATE + '.xsd'
document-namespace $NEW_CO_NAMESPACE
role $role.to-xodel

constant $ALL_CONCEPTS = taxonomy().concepts

output concepts
    for $concept in filter $ALL_CONCEPTS where $item.name.namespace-uri == $OLD_CO_NAMESPACE
        $concept

package-name $PUBLISH_TAXONOMY
document-uri $TICKER + '-' + $TAXONOMY_DATE + '.xsd'
document-namespace $NEW_CO_NAMESPACE
concept $concept.to-xodel
concept-name qname($NEW_CO_NAMESPACE, $concept.name.local-name).to-xodel


output relationships
    for $network in filter taxonomy().networks
		for $relationship in $network.relationships
                $source_ns = $NAMSPACE_DICT[$relationship.source.name.namespace-uri]
                $target_ns = $NAMSPACE_DICT[$relationship.target.name.namespace-uri]
                if $source_ns == none or $target_ns == none
                    skip 
                else
                    $relationship

package-name $PUBLISH_TAXONOMY
relationship $relationship.to-xodel
document-uri $TICKER + '-' + $TAXONOMY_DATE + '.xsd'
document-namespace $NEW_CO_NAMESPACE
relationship-source qname($source_ns, $relationship.source-name.local-name).to-xodel
relationship-target qname($target_ns, $relationship.target-name.local-name).to-xodel


output labels
    for $concept in $ALL_CONCEPTS
        for $lab in $concept.all-labels
            $lab
package-name $PUBLISH_TAXONOMY
document-uri $TICKER + '-' + $TAXONOMY_DATE + '_lab.xml'
document-imported-in $TICKER + '-' + $TAXONOMY_DATE + '.xsd'
label $lab.to-xodel
label-concept-name qname($NAMSPACE_DICT[$concept.name.namespace-uri], $concept.name.local-name).to-xodel


constant $INSTANCE_TAXONOMY = list('./' + $PUBLISH_TAXONOMY + '.zip/' + $PUBLISH_TAXONOMY + '/' + $TICKER + '-' + $TAXONOMY_DATE + '.xsd')

output createInstance
true

instance-name   $INSTANCE_NAME
instance-taxonomy $INSTANCE_TAXONOMY.to-xodel


output add_facts_to_instance

    for $factItem in list({covered @})
        $factConcept = qname($NAMSPACE_DICT[$factItem.concept.name.namespace-uri],$factItem.concept.name.local-name)
        $factDimensions = dict(for $axis in $factItem.dimensions.keys
                                $NewAxis = qname($NAMSPACE_DICT[$axis.name.namespace-uri], $axis.name.local-name);
                                $dimensionsDict = $factItem.dimensions
                                $Member = $dimensionsDict[$axis];
                                $NewMember = qname($NAMSPACE_DICT[$Member.name.namespace-uri], $Member.name.local-name);
                                list($NewAxis,$NewMember)
                                )
        $factPeriod = if $factItem.concept.name in list(PropertyPlantAndEquipmentUsefulLife,FiniteLivedIntangibleAssetUsefulLife,DerivativeRemainingMaturity1)
                            $factItem.period.end
                        else
                            $factItem.period
        $factValue = if $factItem.data-type.name == enum2:enumerationSetItemType
                        list(for $item in $factItem
                            'http://fasb.org/us-gaap/2023#' + $item.local-name
                        ).sort('asc').join(' ')
                    else
                        $factItem
        $factItem

fact-instance $INSTANCE_NAME
fact-value $factValue.to-xince
fact-concept $factConcept.to-xince
fact-unit $rule-value.unit.to-xince
fact-entity  $rule-value.entity.to-xince
fact-period  $factPeriod.to-xince
fact-decimals  $rule-value.decimals
fact-dimensions  $factDimensions.to-xince
fact-is-nil $rule-value.is-nil
